(function(){"use strict";self.onmessage=async l=>{console.log("WORKER: Message received from main app.");const{file:n,filterSettings:i}=l.data;self.postMessage({type:"progress",status:"Uploading video...",progress:10});const a=new FormData;a.append("video",n);try{console.log("WORKER: Step 1 - Starting video upload...");const e=await fetch("http://localhost:8080/api/video/upload",{method:"POST",body:a});if(console.log("WORKER: Upload fetch completed. Status:",e.status),!e.ok){const r=await e.text();throw new Error(`Upload request failed: ${r}`)}const s=await e.json();if(console.log("WORKER: Upload result parsed as JSON:",s),!s.success)throw new Error(s.error||"Server reported upload failure.");self.postMessage({type:"progress",status:"Analyzing audio...",progress:30}),console.log("WORKER: Step 2 - Starting video processing request...");const t=await fetch("http://localhost:8080/api/video/process",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({file_id:s.file_id,filter_settings:i})});if(console.log("WORKER: Process fetch completed. Status:",t.status),!t.ok){const r=await t.text();throw new Error(`Processing request failed: ${r}`)}const o=await t.json();if(console.log("WORKER: Process result parsed as JSON:",o),!o.success)throw new Error(o.error||"Server reported processing failure.");console.log("WORKER: Step 3 - Sending 'complete' message to main app."),self.postMessage({type:"complete",status:o.message||"Processing complete!",segments:o.segments||[],downloadUrl:`http://localhost:8080/api/video/download/${o.clean_file_id}`})}catch(e){console.error("WORKER: CRITICAL ERROR caught in worker:",e),self.postMessage({type:"error",status:"An error occurred in the worker.",error:e.message})}}})();
